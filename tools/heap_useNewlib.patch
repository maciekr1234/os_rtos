From 70c6c904d3fafc8b38f81d536909f3ed79036452 Mon Sep 17 00:00:00 2001
From: maciekr1234 <23438866+maciekr1234@users.noreply.github.com>
Date: Tue, 1 Dec 2020 01:59:36 +0000
Subject: [PATCH] patch

---
 portable/MemMang/heap_useNewlib.c | 288 ++++++++++++++++++++++--------
 1 file changed, 214 insertions(+), 74 deletions(-)

diff --git a/portable/MemMang/heap_useNewlib.c b/portable/MemMang/heap_useNewlib.c
index 7c62f5c..0744624 100644
--- a/portable/MemMang/heap_useNewlib.c
+++ b/portable/MemMang/heap_useNewlib.c
@@ -8,7 +8,10 @@
  * and all newlib's internal memory-management requirements are supported.
  *
  * \author Dave Nadler
- * \date 2-July-2017
+ * \date 20-August-2019
+ * \version 27-Jun-2020 Correct "FreeRTOS.h" capitalization, commentary
+ * \version 24-Jun-2020 commentary only
+ * \version 11-Sep-2019 malloc accounting, comments, newlib version check
  *
  * \see http://www.nadler.com/embedded/newlibAndFreeRTOS.html
  * \see https://sourceware.org/newlib/libc.html#Reentrancy
@@ -22,7 +25,7 @@
  *
  *
  * \copyright
- * (c) Dave Nadler 2017, All Rights Reserved.
+ * (c) Dave Nadler 2017-2020, All Rights Reserved.
  * Web:         http://www.nadler.com
  * email:       drn@nadler.com
  *
@@ -30,7 +33,13 @@
  * are permitted provided that the following conditions are met:
  *
  * - Use or redistributions of source code must retain the above copyright notice,
- *   this list of conditions, ALL ORIGINAL COMMENTS, and the following disclaimer.
+ *   this list of conditions, and the following disclaimer.
+ *
+ * - Use or redistributions of source code must retain ALL ORIGINAL COMMENTS, AND
+ *   ANY CHANGES MUST BE DOCUMENTED, INCLUDING:
+ *   - Reason for change (purpose)
+ *   - Functional change
+ *   - Date and author contact
  *
  * - Redistributions in binary form must reproduce the above copyright notice, this
  *   list of conditions and the following disclaimer in the documentation and/or
@@ -48,119 +57,250 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+// ================================================================================================
+// =======================================  Configuration  ========================================
+// These configuration symbols could be provided by from build...
+
+#if !defined(configISR_STACK_SIZE_WORDS)
+	#define configISR_STACK_SIZE_WORDS (0x100)
+#endif // configISR_STACK_SIZE_WORDS
+
+#define STM_VERSION // Replace sane LD symbols with STM CubeMX's poor standard exported LD symbols
+#define ISR_STACK_LENGTH_BYTES (configISR_STACK_SIZE_WORDS * 4) // bytes to reserve for ISR (MSP) stack
+// =======================================  Configuration  ========================================
+// ================================================================================================
+
 #include <stdlib.h> // maps to newlib...
 #include <malloc.h> // mallinfo...
 #include <errno.h>  // ENOMEM
+#include <stdbool.h>
+#include <stddef.h>
 
 #include "newlib.h"
-#if (__NEWLIB__ != 2) || (__NEWLIB_MINOR__ != 5)
-  #warning "This wrapper was verified for newlib version 2.5.0; please ensure newlib's external requirements for malloc-family are unchanged!"
+#if ((__NEWLIB__ == 2) && (__NEWLIB_MINOR__ < 5)) || ((__NEWLIB__ == 3) && (__NEWLIB_MINOR__ > 1))
+	#warning \
+	  "This wrapper was verified for newlib versions 2.5 - 3.1; please ensure newlib's external requirements for malloc-family are unchanged!"
 #endif
 
 #include "FreeRTOS.h" // defines public interface we're implementing here
-#if !defined(configUSE_NEWLIB_REENTRANT) ||  (configUSE_NEWLIB_REENTRANT!=1)
-  #warning "#define configUSE_NEWLIB_REENTRANT 1 // Required for thread-safety of newlib sprintf, strtok, etc..."
-  // If you're *really* sure you don't need FreeRTOS's newlib reentrancy support, remove this warning...
+#if !defined(configUSE_NEWLIB_REENTRANT) || (configUSE_NEWLIB_REENTRANT != 1)
+	#warning \
+	  "#define configUSE_NEWLIB_REENTRANT 1 // Required for thread-safety of newlib sprintf, dtoa, strtok, etc..."
+// If you're *REALLY* sure you don't need FreeRTOS's newlib reentrancy support, comment out the above warning...
 #endif
 #include "task.h"
 
+
 // ================================================================================================
 // External routines required by newlib's malloc (sbrk/_sbrk, __malloc_lock/unlock)
 // ================================================================================================
 
-#ifndef NDEBUG
-    static int totalBytesProvidedBySBRK = 0;
-#endif
-extern char _end;  // Defined in the linker script
-static int heapBytesRemaining = -1; // configTOTAL_HEAP_SIZE is not constant will be init later
-
-//! sbrk/_sbrk version supporting reentrant newlib (depends upon above symbols defined by linker control file).
-char * sbrk(int incr) {
-    static char *currentHeapEnd = &_end;
-    vTaskSuspendAll(); // Note: safe to use before FreeRTOS scheduler started
-    if (heapBytesRemaining == -1) {
-      heapBytesRemaining = configTOTAL_HEAP_SIZE;
-    }
-    char *previousHeapEnd = currentHeapEnd;
-    if (currentHeapEnd + incr > &_end + configTOTAL_HEAP_SIZE) {
-        #if( configUSE_MALLOC_FAILED_HOOK == 1 )
+// Simplistic sbrk implementations assume stack grows downwards from top of memory,
+// and heap grows upwards starting just after BSS.
+// FreeRTOS normally allocates task stacks from a pool placed within BSS or DATA.
+// Thus within a FreeRTOS task, stack pointer is always below end of BSS.
+// When using this module, stacks are allocated from malloc pool, still always prior
+// current unused heap area...
+
+// Doesn't work with FreeRTOS: STM CubeMX 2018-2019 Incorrect Implementation
+#if 0
+    caddr_t _sbrk(int incr)
+    {
+        extern char end asm("end"); // From linker: lowest unused RAM address, just beyond end of BSS.
+        static char *heap_end;
+        char *prev_heap_end;
+        if (heap_end == 0) heap_end = &end;
+        prev_heap_end = heap_end;
+        if (heap_end + incr > stack_ptr) // Fails here: always true for FreeRTOS task stacks
         {
-            extern void vApplicationMallocFailedHook( void );
-            vApplicationMallocFailedHook();
+            errno = ENOMEM; // ...so first call inside a FreeRTOS task lands here
+            return (caddr_t) -1;
         }
-        #elif 0
-            // If you want to alert debugger or halt...
-            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
-        #else
-            // If you prefer to believe your application will gracefully trap out-of-memory...
-            _impure_ptr->_errno = ENOMEM; // newlib's thread-specific errno
-            xTaskResumeAll();
-        #endif
-        return (char *)-1; // the malloc-family routine that called sbrk will return 0
+        heap_end += incr;
+        return (caddr_t) prev_heap_end;
     }
-    currentHeapEnd += incr;
-    heapBytesRemaining -= incr;
-    #ifndef NDEBUG
-        totalBytesProvidedBySBRK += incr;
-    #endif
-    xTaskResumeAll();
-    return (char *) previousHeapEnd;
+#endif
+
+register char *stack_ptr asm("sp");
+
+#ifdef STM_VERSION // Use STM CubeMX LD symbols for heap+stack area
+	// To avoid modifying STM LD file (and then having CubeMX trash it), use available STM symbols
+	// Unfortunately STM does not provide standardized markers for RAM suitable for heap!
+	// STM CubeMX-generated LD files provide the following symbols:
+	//    end     /* aligned first word beyond BSS */
+	//    _estack /* one word beyond end of "RAM" Ram type memory, for STM32F429 0x20030000 */
+	// Kludge below uses CubeMX-generated symbols instead of sane LD definitions
+	#define __HeapBase end
+	#define __HeapLimit _estack // In K64F LD this is already adjusted for ISR stack space...
+static int heapBytesRemaining;
+// no DRN HEAP_SIZE symbol from LD... // that's (&__HeapLimit)-(&__HeapBase)
+uint32_t TotalHeapSize; // publish for diagnostic routines; filled in first _sbrk call.
+#else
+// Note: DRN's K64F LD provided: __StackTop (byte beyond end of memory), __StackLimit, HEAP_SIZE, STACK_SIZE
+// __HeapLimit was already adjusted to be below reserved stack area.
+extern char HEAP_SIZE;                             // make sure to define this symbol in linker LD command file
+static int  heapBytesRemaining = (int) &HEAP_SIZE; // that's (&__HeapLimit)-(&__HeapBase)
+#endif
+
+#ifdef MALLOCS_INSIDE_ISRs // STM code to avoid malloc within ISR (USB CDC stack) \
+						   // We can't use vTaskSuspendAll() within an ISR.
+  // STM's stunningly bad coding malpractice calls malloc within ISRs (for example, on USB connect function USBD_CDC_Init)
+	// So, we must just suspend/resume interrupts, lengthening max interrupt response time, aarrggg...
+	#define DRN_ENTER_CRITICAL_SECTION(_usis) \
+		{ _usis = taskENTER_CRITICAL_FROM_ISR(); } // Disables interrupts (after saving prior state)
+	#define DRN_EXIT_CRITICAL_SECTION(_usis)   \
+		{                                      \
+			taskEXIT_CRITICAL_FROM_ISR(_usis); \
+		} // Re-enables interrupts (unless already disabled prior taskENTER_CRITICAL)
+#else
+	#define DRN_ENTER_CRITICAL_SECTION(_usis) \
+		vTaskSuspendAll(); // Note: safe to use before FreeRTOS scheduler started, but not in ISR
+	#define DRN_EXIT_CRITICAL_SECTION(_usis) \
+		xTaskResumeAll(); // Note: safe to use before FreeRTOS scheduler started, but not in ISR
+#endif
+
+#ifndef NDEBUG
+static int totalBytesProvidedBySBRK = 0;
+#endif
+extern char __HeapBase, __HeapLimit; // symbols from linker LD command file
+
+// Use of vTaskSuspendAll() in _sbrk_r() is normally redundant, as newlib malloc family routines call
+// __malloc_lock before calling _sbrk_r(). Note vTaskSuspendAll/xTaskResumeAll support nesting.
+
+//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
+void *_sbrk_r(struct _reent *pReent, int incr) {
+#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
+	UBaseType_t usis;      // saved interrupt status
+#endif
+	static char *currentHeapEnd = &__HeapBase;
+#ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
+	if (TotalHeapSize == 0) {
+		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit) - (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
+	};
+#endif
+	char *limit = (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
+	  ? stack_ptr
+	  :                                      // Before scheduler is started, limit is stack pointer (risky!)
+	  &__HeapLimit - ISR_STACK_LENGTH_BYTES; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
+	DRN_ENTER_CRITICAL_SECTION(usis);
+	if (currentHeapEnd + incr > limit) {
+// Ooops, no more memory available...
+#if (configUSE_MALLOC_FAILED_HOOK == 1)
+		{
+			extern void vApplicationMallocFailedHook(void);
+			DRN_EXIT_CRITICAL_SECTION(usis);
+			vApplicationMallocFailedHook();
+		}
+#elif defined(configHARD_STOP_ON_MALLOC_FAILURE)
+        // If you want to alert debugger or halt...
+        // WARNING: brkpt instruction may prevent watchdog operation...
+        while (1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
+#else
+		// Default, if you prefer to believe your application will gracefully trap out-of-memory...
+		pReent->_errno = ENOMEM; // newlib's thread-specific errno
+		DRN_EXIT_CRITICAL_SECTION(usis);
+#endif
+		return (char *) -1; // the malloc-family routine that called sbrk will return 0
+	}
+	// 'incr' of memory is available: update accounting and return it.
+	char *previousHeapEnd = currentHeapEnd;
+	currentHeapEnd += incr;
+	heapBytesRemaining -= incr;
+#ifndef NDEBUG
+	totalBytesProvidedBySBRK += incr;
+#endif
+	DRN_EXIT_CRITICAL_SECTION(usis);
+	return (char *) previousHeapEnd;
+}
+//! non-reentrant sbrk uses is actually reentrant by using current context
+// ... because the current _reent structure is pointed to by global _impure_ptr
+char *sbrk(int incr) {
+	return (char *) (_sbrk_r(_impure_ptr, incr));
 }
-//! Synonym for sbrk.
-char * _sbrk(int incr) { return sbrk(incr); };
+//! _sbrk is a synonym for sbrk.
+char *_sbrk(int incr) {
+	return sbrk(incr);
+};
 
-#if (__NEWLIB__ >= 3)
-void __malloc_lock(struct _reent *ptr __attribute__((__unused__)))     {       vTaskSuspendAll(); };
-void __malloc_unlock(struct _reent *ptr __attribute__((__unused__)))   { (void)xTaskResumeAll();  };
+#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
+static UBaseType_t malLock_uxSavedInterruptStatus;
+#endif
+void __malloc_lock(struct _reent *r) {
+#if defined(MALLOCS_INSIDE_ISRs)
+	DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
+#else
+	bool insideAnISR = xPortIsInsideInterrupt();
+	configASSERT(!insideAnISR); // Make damn sure no more mallocs inside ISRs!!
+	vTaskSuspendAll();
+#endif
+};
+void __malloc_unlock(struct _reent *r) {
+#if defined(MALLOCS_INSIDE_ISRs)
+	DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 #else
-void __malloc_lock()     {       vTaskSuspendAll(); };
-void __malloc_unlock()   { (void)xTaskResumeAll();  };
+	(void) xTaskResumeAll();
 #endif
+};
 
 // newlib also requires implementing locks for the application's environment memory space,
 // accessed by newlib's setenv() and getenv() functions.
 // As these are trivial functions, momentarily suspend task switching (rather than semaphore).
+// Not required (and trimmed by linker) in applications not using environment variables.
 // ToDo: Move __env_lock/unlock to a separate newlib helper file.
-void __env_lock()    {       vTaskSuspendAll(); };
-void __env_unlock()  { (void)xTaskResumeAll();  };
+void __env_lock() {
+	vTaskSuspendAll();
+};
+void __env_unlock() {
+	(void) xTaskResumeAll();
+};
 
+#if 1 // Provide malloc debug and accounting wrappers
 /// /brief  Wrap malloc/malloc_r to help debug who requests memory and why.
-/// Add to the linker command line: -Xlinker --wrap=malloc -Xlinker --wrap=_malloc_r
+/// To use these, add linker options: -Xlinker --wrap=malloc -Xlinker --wrap=_malloc_r
 // Note: These functions are normally unused and stripped by linker.
-void *__wrap_malloc(size_t nbytes) {
-    extern void * __real_malloc(size_t nbytes);
-    void *p = __real_malloc(nbytes); // Solely for debug breakpoint...
+size_t      TotalMallocdBytes;
+int         MallocCallCnt;
+static bool inside_malloc;
+void *      __wrap_malloc(size_t nbytes) {
+    extern void *__real_malloc(size_t nbytes);
+    MallocCallCnt++;
+    TotalMallocdBytes += nbytes;
+    inside_malloc = true;
+    void *p       = __real_malloc(nbytes); // will call malloc_r...
+    inside_malloc = false;
     return p;
 };
-void *__wrap__malloc_r(void *reent __attribute__((__unused__)), size_t nbytes) {
-    extern void * __real__malloc_r(size_t nbytes);
-    void *p = __real__malloc_r(nbytes); // Solely for debug breakpoint...
-    return p;
+void *__wrap__malloc_r(void *reent, size_t nbytes) {
+	extern void *__real__malloc_r(size_t nbytes);
+	if (!inside_malloc) {
+		MallocCallCnt++;
+		TotalMallocdBytes += nbytes;
+	};
+	void *p = __real__malloc_r(nbytes);
+	return p;
 };
-
+#endif
 
 // ================================================================================================
 // Implement FreeRTOS's memory API using newlib-provided malloc family.
 // ================================================================================================
 
-void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
-    void *p = malloc(xSize);
-    return p;
+void *pvPortMalloc(size_t xSize) PRIVILEGED_FUNCTION {
+	void *p = malloc(xSize);
+	return p;
 }
-void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
-    free(pv);
+void vPortFree(void *pv) PRIVILEGED_FUNCTION {
+	free(pv);
 };
 
-size_t xPortGetFreeHeapSize( void ) PRIVILEGED_FUNCTION {
-    struct mallinfo mi = mallinfo();
-    if (heapBytesRemaining == -1) {
-        heapBytesRemaining = configTOTAL_HEAP_SIZE;
-    }
-    return mi.fordblks + heapBytesRemaining;
+size_t xPortGetFreeHeapSize(void) PRIVILEGED_FUNCTION {
+	struct mallinfo mi = mallinfo();         // available space now managed by newlib
+	return mi.fordblks + heapBytesRemaining; // plus space not yet handed to newlib by sbrk
 }
 
-// GetMinimumEverFree is not available in newlib's malloc implementation.
-// So, no implementation provided: size_t xPortGetMinimumEverFreeHeapSize( void ) PRIVILEGED_FUNCTION;
+// GetMinimumEverFree is not available in newlib's xPortGetMinimumEverFreeHeapSizemalloc implementation.
+// So, no implementation is provided: size_t ( void ) PRIVILEGED_FUNCTION;
 
 //! No implementation needed, but stub provided in case application already calls vPortInitialiseBlocks
-void vPortInitialiseBlocks( void ) PRIVILEGED_FUNCTION {};
+void vPortInitialiseBlocks(void) PRIVILEGED_FUNCTION {};
+
-- 
2.29.2.windows.2

